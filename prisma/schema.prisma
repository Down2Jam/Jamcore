// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  slug              String            @unique
  name              String
  email             String?
  password          String
  profilePicture    String?
  bannerPicture     String?
  short             String?
  bio               String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  mod               Boolean           @default(false)
  admin             Boolean           @default(false)
  twitch            String?

  // Relations
  posts             Post[]            @relation(name: "PostToAuthor")
  likes             Like[]
  comments          Comment[]
  jams              Jam[]
  reports           Report[]          @relation(name: "ReportToUser")
  createdReports    Report[]          @relation(name: "ReportToReporter")
  themeSuggestions  ThemeSuggestion[] @relation(name: "SuggestionToUser")
  themeVotes        ThemeVote[]       @relation(name: "VoteToUser")
  themeVotes2       ThemeVote2[]      @relation(name: "Vote2ToUser")
  tracks            Track[]           @relation(name: "TrackToComposer")
  scores            Score[]           @relation(name: "ScoreToUser")
  ghosts            Ghost[]           @relation(name: "GhostToUser")
  data              Data[]            @relation(name: "DataToUser")
  events            Event[]
  primaryRoles      TeamRole[]        @relation(name: "PrimaryRolesToUsers")
  secondaryRoles    TeamRole[]        @relation(name: "SecondaryRolesToUsers")
  teams             Team[]
  ownedTeams        Team[]            @relation(name: "TeamsToOwner")
  teamApplications  TeamApplication[] @relation(name: "TeamApplicationsToUser")
  teamInvites       TeamInvite[]      @relation(name: "TeamInvitesToUser")
  ratings           Rating[]          @relation(name: "RatingToUser")
  achievements      Achievement[]     @relation(name: "AchievementToUsers")
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

model TagCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  priority    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation
  tags        Tag[]
}

model Tag {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  autoRegex   String?
  alwaysAdded Boolean       @default(false)
  priority    Priority      @default(MEDIUM)
  modOnly     Boolean       @default(false)
  icon        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  gameTag     Boolean       @default(true)
  postTag     Boolean       @default(true)

  // Relations
  posts       Post[]
  games       Game[]        @relation(name: "GamesToTags")
  category    TagCategory?  @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model CustomTag {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  posts       Post[]
}

model Post {
  id          Int         @id @default(autoincrement())
  slug        String?     @unique
  title       String
  content     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sticky      Boolean     @default(false)

  // Relations
  author      User        @relation(fields: [authorId], references: [id], name: "PostToAuthor")
  authorId    Int
  tags        Tag[]
  customTags  CustomTag[]
  comments    Comment[]
  likes       Like[]      @relation(name: "LikeToPost")
  reports     Report[]    @relation(name: "ReportToPost")
  reactions   Reaction[]  @relation(name: "PostToReactions")
}

model Reaction {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  image       String
  artist      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  posts       Post[]    @relation(name: "PostToReactions")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  post      Post?     @relation(fields: [postId], references: [id])
  postId    Int?
  comment   Comment?  @relation(fields: [commentId], references: [id], name: "CommentToComments")
  commentId Int?
  game      Game?     @relation(fields: [gameId], references: [id], name: "CommentToGame")
  gameId    Int?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  likes     Like[]    @relation(name: "LikeToComment")
  reports   Report[]  @relation(name: "ReportToComment")
  children  Comment[] @relation(name: "CommentToComments")
}

model Jam {
  id              Int       @id @default(autoincrement())
  name            String
  startTime       DateTime  @default(now())
  suggestionHours Int       @default(168)
  slaughterHours  Int       @default(96)
  votingHours  	  Int       @default(72)
  jammingHours    Int       @default(72)
  ratingHours     Int       @default(334)
  submissionHours Int       @default(2)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  themePerUser    Int       @default(3)
  themePerRound   Int       @default(15)
  noOfRounds      Int       @default(1)


  // Relations
  games             Game[]            @relation(name: "GameToJam")
  users             User[]
  themeSuggestions  ThemeSuggestion[] @relation(name: "SuggestionToJam")
  themeVotes        ThemeVote[]       @relation(name: "VoteToJam")
  themeVotes2       ThemeVote2[]      @relation(name: "Vote2ToJam")
  teams             Team[]            @relation(name: "TeamsToJam")
}

model Event {
  id          Int           @id @default(autoincrement())
  slug        String        @unique
  name        String
  content     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  startTime   DateTime      
  endTime     DateTime      
  link        String?
  icon        String?

  // Relations
  category    EventCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  host        User          @relation(fields: [hostId], references: [id])
  hostId      Int
}

model EventCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation
  events      Event[]
}

enum GameCategory {
  REGULAR
  ODA
  EXTRA
}

model Game {
  id                  Int                 @id @default(autoincrement())
  slug                String              @unique
  name                String
  description         String?
  short               String?
  thumbnail           String?
  banner              String?
  category            GameCategory
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  ratingCategories    RatingCategory[]    
  majRatingCategories RatingCategory[]    @relation(name: "GameToMajorityContentRating")
  published           Boolean             @default(false)
  themeJustification  String?

  // Relations
  team                Team                @relation(fields: [teamId], references: [id], name: "GameToTeam")
  teamId              Int                 @unique
  jam                 Jam                 @relation(fields: [jamId], references: [id], name: "GameToJam")
  jamId               Int
  reports             Report[]            @relation(name: "ReportToGame")
  downloadLinks       GameDownloadLink[]  @relation(name: "LinkToGame")
  tracks              Track[]             @relation(name: "TrackToGame")
  leaderboards        Leaderboard[]       @relation(name: "LeaderboardToGame")
  achievements        Achievement[]       @relation(name: "AchievementToGame")
  ghosts              Ghost[]             @relation(name: "GhostToGame")
  data                Data[]              @relation(name: "DataToGame")
  ratings             Rating[]            @relation(name: "RatingToGame")
  flags               Flag[]              @relation(name: "GamesToFlags")
  tags                Tag[]               @relation(name: "GamesToTags")
  comments            Comment[]           @relation(name: "CommentToGame")
}

model Flag {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String?
  icon                String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relations
  games               Game[]             @relation(name: "GamesToFlags")
}

model RatingCategory {
  id                    Int                 @id @default(autoincrement())
  name                  String
  description           String?
  askMajorityContent    Boolean             @default(false)
  order                 Int                 @default(0)
  always                Boolean             @default(false)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relations
  ratings               Rating[]            @relation("RatingToCategory")
  games                 Game[]
  majContentGames       Game[]              @relation("GameToMajorityContentRating")
}

model Rating {
  id            Int                 @id @default(autoincrement())
  value         Int
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  // Relations
  category      RatingCategory      @relation(fields: [categoryId], references: [id], name: "RatingToCategory")
  categoryId    Int
  user          User                @relation(fields: [userId], references: [id], name: "RatingToUser")
  userId        Int
  game          Game                @relation(fields: [gameId], references: [id], name: "RatingToGame")
  gameId        Int 
}

model Track {
  id            Int       @id @default(autoincrement())
  slug          String    @unique
  url           String
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  composer      User      @relation(fields: [composerId], references: [id], name: "TrackToComposer")
  composerId    Int
  game          Game      @relation(fields: [gameId], references: [id], name: "TrackToGame")
  gameId        Int
}

enum LeaderboardType {
  SCORE
  GOLF
  SPEEDRUN
  ENDURANCE
}

model Leaderboard {
  id            Int             @id @default(autoincrement())
  type          LeaderboardType
  name          String
  decimalPlaces Int             @default(0)
  maxUsersShown Int             @default(10)
  onlyBest      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  game          Game            @relation(fields: [gameId], references: [id], name: "LeaderboardToGame")
  gameId        Int
  scores        Score[]         @relation(name: "ScoreToLeaderboard")
}

model Score {
  id            Int         @id @default(autoincrement())
  data          Int
  evidence      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user          User        @relation(fields: [userId], references: [id], name: "ScoreToUser")
  userId        Int
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id], name: "ScoreToLeaderboard")
  leaderboardId Int
}

model Achievement {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  users         User[]      @relation(name: "AchievementToUsers")
  game          Game        @relation(fields: [gameId], references: [id], name: "AchievementToGame")
  gameId        Int
}

model Ghost {
  id            Int       @id @default(autoincrement())
  data          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], name: "GhostToUser")
  userId        Int
  game          Game      @relation(fields: [gameId], references: [id], name: "GhostToGame")
  gameId        Int
}

model Data {
  id            Int       @id @default(autoincrement())
  data          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], name: "DataToUser")
  userId        Int
  game          Game      @relation(fields: [gameId], references: [id], name: "DataToGame")
  gameId        Int
}

model GameDownloadLink {
  id        Int      @id @default(autoincrement())
  url       String
  platform  String   // Will store: "Windows", "MacOS", "Linux", "Web", "Mobile", "Other"
  
  // Relation to Game
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade, name: "LinkToGame")
  gameId    Int
}

model Like {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  post        Post?     @relation(fields: [postId], references: [id], name: "LikeToPost")
  postId      Int?
  comment     Comment?  @relation(fields: [commentId], references: [id], name: "LikeToComment")
  commentId   Int?
}

model FeaturedStreamer {
  id           Int      @id @default(autoincrement()) 
  userName     String   
  thumbnailUrl String   
  streamTitle  String   
  streamTags   String[] @default([])
  viewerCount  Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Report {
  id          Int       @id @default(autoincrement()) 
  resolved    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  reporter    User      @relation(fields: [reporterId], references: [id], name: "ReportToReporter")
  reporterId  Int
  user        User?     @relation(fields: [userId], references: [id], name: "ReportToUser")
  userId      Int
  post        Post?     @relation(fields: [postId], references: [id], name: "ReportToPost")
  postId      Int?
  comment     Comment?  @relation(fields: [commentId], references: [id], name: "ReportToComment")
  commentId   Int?
  game        Game?     @relation(fields: [gameId], references: [id], name: "ReportToGame")
  gameId      Int?
}

model ThemeSuggestion {
  id             	      Int       @id @default(autoincrement())
  suggestion 		 	      String
  description           String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?  @updatedAt

  // Relations
  createdBy        	    User      @relation(fields: [userId], references: [id], name: "SuggestionToUser")
  userId                Int
  createdFor         	  Jam       @relation(fields: [jamId], references: [id], name: "SuggestionToJam")
  jamId                 Int
  votes                 ThemeVote[]
  votes2                ThemeVote2[]
}


model ThemeVote {
  id                Int             @id @default(autoincrement())
  slaughterScore    Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime?       @updatedAt

  // Relations
  user        	    User            @relation(fields: [userId], references: [id], name: "VoteToUser")
  userId            Int
  jam         	    Jam             @relation(fields: [jamId], references: [id], name: "VoteToJam")
  jamId             Int
  themeSuggestion   ThemeSuggestion @relation(fields: [themeSuggestionId], references: [id])
  themeSuggestionId Int
}


model Team {
  id                Int               @id @default(autoincrement())
  name              String?
  applicationsOpen  Boolean           @default(false)
  rolesWanted       TeamRole[]
  description       String?

  // Relations
  owner        	    User              @relation(fields: [ownerId], references: [id], name: "TeamsToOwner")
  ownerId           Int
  users             User[]
  jam         	    Jam               @relation(fields: [jamId], references: [id], name: "TeamsToJam")
  jamId             Int
  invites           TeamInvite[]      @relation(name: "TeamInvitesToTeam")
  applications      TeamApplication[] @relation(name: "TeamApplicationsToTeam")
  game              Game?             @relation(name: "GameToTeam")
}


model TeamRole {
  id                Int         @id @default(autoincrement())
  slug              String      @unique
  name              String
  description       String
  icon              String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime?   @updatedAt

  // Relations
  primaryUsers      User[]      @relation(name: "PrimaryRolesToUsers")
  secondaryUsers    User[]      @relation(name: "SecondaryRolesToUsers")
  wantedBy          Team[]
}


model TeamInvite {
  id                Int         @id @default(autoincrement())
  content           String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime?   @updatedAt

  //Relations
  team              Team        @relation(fields: [teamId], references: [id], name: "TeamInvitesToTeam")
  teamId            Int         
  user              User        @relation(fields: [userId], references: [id], name: "TeamInvitesToUser")
  userId            Int         
}


model TeamApplication {
  id                Int         @id @default(autoincrement())
  content           String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime?   @updatedAt

  //Relations
  team              Team        @relation(fields: [teamId], references: [id], name: "TeamApplicationsToTeam")
  teamId            Int         
  user              User        @relation(fields: [userId], references: [id], name: "TeamApplicationsToUser")
  userId            Int         
}

model ThemeVote2 {
  id                Int       @id @default(autoincrement())
  voteScore         Int
  voteRound         Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?  @updatedAt

  // Relations
  user        	    User            @relation(fields: [userId], references: [id], name: "Vote2ToUser")
  userId            Int
  jam         	    Jam             @relation(fields: [jamId], references: [id], name: "Vote2ToJam")
  jamId             Int
  themeSuggestion   ThemeSuggestion @relation(fields: [themeSuggestionId], references: [id])
  themeSuggestionId Int
}